<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://abraverm.github.io/"/>
  <updated>2018-07-03T08:23:30.570Z</updated>
  <id>https://abraverm.github.io/</id>
  
  <author>
    <name>Alexander Braverman Masis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell native Google drive</title>
    <link href="https://abraverm.github.io/2018/07/03/Shell-native-Google-drive/"/>
    <id>https://abraverm.github.io/2018/07/03/Shell-native-Google-drive/</id>
    <published>2018-07-03T08:23:30.000Z</published>
    <updated>2018-07-03T08:23:30.570Z</updated>
    
    <content type="html"><![CDATA[<script src='https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js'></script><script src='/js/attachTooltips.js'></script><link rel='stylesheet' href='/css/tippy.css'><p>&lt;%- toc(page.content) %&gt;</p><p>A year ago I’ve built a setup where I can edit my Google drive documents with Vim but it didn’t catch because I was using <a href="https://github.com/odeke-em/drive" target="_blank" rel="noopener">drive</a> which requires manual pulling and pushing, just like Git. So while I’m using Git on daily basis, Google drive is only needed when I want to collaborate or easily share a document which apparently is not so often. After short dry time and maybe some small issues, I forgot about it. However it’s still a sour point for me because I’m browsing with <a href="https://github.com/qutebrowser/qutebrowser" target="_blank" rel="noopener">Qutebrowser</a> and editing Google docs in it is not so fluent.</p><p>Yesterday, my friend Shaked shared with me a nice gem, <a href="https://github.com/harababurel/gcsf" target="_blank" rel="noopener">GCSF</a>:</p><blockquote><p>GCSF is a virtual filesystem that allows users to mount their Google Drive account locally and interact with it as a regular disk partition.</p></blockquote><p>GCSF is libfuse based, and there were other similar projects before but they seemed outdated when I wanted to try them. This is a very good news because now I don’t need to think about pulling or pushing. I just need to go to my local folder and edit the file.</p><p>How to edit a Google doc file locally with Vim:</p><ol type="1"><li>Install <a href="https://github.com/harababurel/gcsf" target="_blank" rel="noopener">GCSF</a> and mount your Google drive.</li><li>Install <a href="https://pandoc.org/installing.html" target="_blank" rel="noopener">Pandoc</a>.</li><li>Browse to <a href="https://drive.google.com/drive/settings" target="_blank" rel="noopener">Google drive settings</a>, check the box ‘Convert Uploads’.</li><li>Add to your Vim configuration (.vimrc): <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">autocmd</span> BufReadPost *.odt :%!pandoc -<span class="keyword">f</span> odt -t markdown</span><br><span class="line"><span class="keyword">autocmd</span> BufWritePost *.odt :!pandoc -<span class="keyword">f</span> markdown -t odt % -<span class="keyword">o</span> <span class="string">"%:r"</span>.odt</span><br></pre></td></tr></table></figure></li></ol><p>Notes:</p><ul><li>When you create a Google doc, it should have ‘odt’ extension in your local mount.</li><li>If you want to create a Google doc locally, make sure it has ‘.odt’ suffix.</li><li>You can add more file types in the same matter, such as ‘docx’ but it has little use in Google drive.</li><li>Cooperative editing won’t work, and I won’t bet it will happen anytime soon or in this matter.</li><li>Don’t edit it while others might be editing it.</li><li>Pandoc conversion will destroy some WYSIWYG, for example pictures positions and fonts. Work with simple documents.</li></ul><p>What is it good for?</p><ul><li>GCSF in general makes it easier to share with others, makes it more like Dropbox.</li><li>Google drive allows hosting <a href="https://developers.google.com/drive/api/v3/publish-site" target="_blank" rel="noopener">static webpages</a><a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>, maybe it can work with Hexo and the like</li><li>Easy backup for documents and the like (not sure how good it will work)</li><li>Initial drafting - Google docs has ‘suggestion’ and allows commenting which is more important in document development and you loose that in conversion. But the first step is the hardest step.</li></ul><div style="display: none" class="tippy-tooltip" id="tooltip1"><p>I can’t find the original documentation but Google it ;)</p></div><section class="footnotes"><hr><ol><li id="fn1"><p>I can’t find the original documentation but Google it ;)<a href="#fnref1" class="footnote-back">↩</a></p></li></ol></section><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&#39;https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js&#39;&gt;&lt;/script&gt;
&lt;script src=&#39;/js/attachTooltips.js&#39;&gt;&lt;/script&gt;
&lt;link rel=&#39;styl
      
    
    </summary>
    
    
      <category term="google" scheme="https://abraverm.github.io/tags/google/"/>
    
      <category term="vim" scheme="https://abraverm.github.io/tags/vim/"/>
    
      <category term="filesystem" scheme="https://abraverm.github.io/tags/filesystem/"/>
    
  </entry>
  
  <entry>
    <title>Github integration with Jenkins behind firewall</title>
    <link href="https://abraverm.github.io/2018/03/13/github-firewalld-jenkins-integration/"/>
    <id>https://abraverm.github.io/2018/03/13/github-firewalld-jenkins-integration/</id>
    <published>2018-03-13T11:19:54.000Z</published>
    <updated>2018-07-02T20:15:01.577Z</updated>
    
    <content type="html"><![CDATA[<script src='https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js'></script><script src='/js/attachTooltips.js'></script><link rel='stylesheet' href='/css/tippy.css'><h1 id="tldr">TL;DR</h1><p>This post will explain how to trigger a job on Jenkins that will test changes on Github repository when Jenkins is behind a firewall. Github has service integration with Amazon SQS and Jenkins has a plugin that triggers a job on SQS event. To make it work you will need to do the following:</p><ol type="1"><li>Create Amazon SQS for your Github repository and configure it</li><li>Add SQS to Github and configure it to notify on push and pull requests</li><li>Install SQS plugin and configure it in Jenkins</li><li>Write pipeline job that will handle the different events</li><li>Post job results to Github branch or pull request</li></ol><h1 id="amazon-sqs">Amazon SQS</h1><p>“Amazon Simple Queue Service (SQS) is a fully managed message queuing service”, in other words SQS it will be our message bus, where we send messages from Github and listen to them on Jenkins. Jenkins will have to connect to SQS (outbond connection) and not listen to inbound connections. To get started, you need an AWS account and then you can create a new SQS service like this:</p><ol type="1"><li>Go to <a href="https://console.aws.amazon.com/sqs" target="_blank" rel="noopener">AWS SQS console</a></li><li>Click on <code>Create New Queue</code>, and then:<ul><li>What do you want to name your queue? <strong>Repository name</strong><a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></li><li>What type of queue do you need?<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a> <strong>Standard Queue</strong></li></ul></li><li>Click on <code>Quick-Create-Queue</code><a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a></li><li>Select the queue you’ve just created and at the bottom copy for later:<ul><li><code>ARN</code></li><li><code>URL</code></li></ul></li></ol><p>Next we will create a new IAM user for Jenkins:</p><ol type="1"><li>Go to <a href="https://console.aws.amazon.com/iam" target="_blank" rel="noopener">IAM console</a></li><li>Click on <code>Add user</code>, and then:<ul><li>User name: <strong>jenkins</strong><a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a></li><li>Access type: <em>Programmatic access</em></li></ul></li><li>Click on <code>Next:Permissions</code>, and then:<ol type="a"><li>Select <code>Attach existing policies directly</code></li><li>In the <em>Filter</em> search for <code>AmazonSQSFullAccess</code></li></ol></li><li>Click on <code>Next:Preview</code> and then Click on <code>Create user</code></li><li>Copy the <code>Access Key ID</code> and <code>Secret access key</code><a href="#fn5" class="footnote-ref" id="fnref5"><sup>5</sup></a></li></ol><p>That’s it, you have SQS configured.</p><h1 id="github">Github</h1><p>Github has a great support for webhooks and services, and there is even a one for Jenkins. But all of them assume Github can reach your Jenkins. Fortunately Github also has a service for Amazon SQS:</p><ol type="1"><li>Go to your repository services: <code>https://github.com/&lt;user&gt;/&lt;repo&gt;/settings/installations</code></li><li>Click on <code>Add service</code>, then find and select <strong>Amazon SQS</strong></li><li>Click on <strong>Amazon SQS</strong> service to configure it, and then:<ul><li>Aws access key - IAM user <code>Access Key ID</code></li><li>Aws sqs arn - SQS queue <code>ARN</code></li><li>Aws secret key - IAM user <code>Secret access key</code></li></ul></li><li>Update service</li><li><p>Open your terminal:</p><ol type="a"><li><p>Find the service id: <code>curl -u &lt;user&gt; https://api.github.com/repos/&lt;user&gt;/&lt;repo&gt;/hooks</code></p></li><li><p>Modify on which events the service will trigger: <code>curl -X PATCH --data '{ &quot;events&quot;: [&quot;push&quot;, &quot;pull_request&quot;] }' -u &lt;user&gt; 'https://api.github.com/repos/&lt;user&gt;/&lt;root&gt;/hooks/&lt;id&gt;'</code></p></li></ol></li></ol><p>Github will now send messages on push and pull request to your Amazon SQS queue. You can find what other events can be added and the messages content at <a href="https://developer.github.com/webhooks/#events" target="_blank" rel="noopener">Github documentation on web-hooks and events</a>.</p><h1 id="jenkins">Jenkins</h1><p>Jenkins has a vast collection of open source plugins and even two for Amazon SQS. You will need only one of them and a pipeline support:</p><ol type="1"><li>Go to Jenkins Plugin manager: <code>http://&lt;jenkins FQDN&gt;/pluginManager/available</code></li><li>Install <code>￼AWS SQS Build Trigger Plugin</code><a href="#fn6" class="footnote-ref" id="fnref6"><sup>6</sup></a></li><li>Go to Jenkins configuration: <code>http://&lt;jenkins FQDN&gt;/configure</code></li><li><p>In section <strong>Configuration of Amazon SQS queues</strong> click on <code>Add</code>, then:</p><ol type="a"><li>Credentials: Click on <code>Add</code> and select <strong>Jenkins</strong>, then:<ul><li>Kind: <strong>Secret Text</strong></li><li>Scope: <strong>Global</strong></li><li>Secret: IAM user’s <code>Secret access key</code></li><li>ID: IAM user’s <code>Access Key ID</code></li></ul></li><li>Queue name: Queue <code>URL</code></li><li>Click on <code>Test access</code>, you should see: “Access to &lt;queue&gt; successful”</li></ol></li><li><p>Click on <code>Save</code></p></li></ol><p>Create a new Pipeline job<a href="#fn7" class="footnote-ref" id="fnref7"><sup>7</sup></a> with the following setting:</p><ul><li>In section <strong>Build Triggers</strong>:<ul><li>mark: ‘Trigger build when a message is published to an Amazon SQS queue’</li><li>SQS queue to monitor: &lt;queue&gt;</li></ul></li><li>In section <strong>Pipeline</strong>, use <code>Pipeline script</code> and you can use this as template for your job: <div class="spoiler collapsed"><div class="spoiler-title">Pipeline</div><div class="spoiler-content"><script src="//gist.github.com/b702bc7fbdca6736b4ffc55f03e7929e.js"></script></div></div><ul><li>Lines 11-36 function for commenting on Github:<ul><li>Install python library <code>PyGithub</code> on the executing system</li><li>Create Access token in Github for your user (or a bot user)</li><li>Set global parameter in Jenkins <code>GITHUB_ACCESS_TOKEN</code></li></ul></li><li>Lines 38-61 function for cloning and checking out the right repository based on the SQS message from Github.</li><li>Lines 69-73 will handle parameters from SQS trigger, the most important is <code>sqs_body</code></li><li>Lines 76-87 will prepare everything you need for the job to work</li></ul></li></ul><div style="display: none" class="tippy-tooltip" id="tooltip1"><p>Whatever you want</p></div><div style="display: none" class="tippy-tooltip" id="tooltip2"><p>I think it will work well for most cases</p></div><div style="display: none" class="tippy-tooltip" id="tooltip3"><p>We will configure it later</p></div><div style="display: none" class="tippy-tooltip" id="tooltip4"><p>Whatever you want</p></div><div style="display: none" class="tippy-tooltip" id="tooltip5"><p>You will need it for Jenkins and Github integration</p></div><div style="display: none" class="tippy-tooltip" id="tooltip6"><p>version 2.0.1</p></div><div style="display: none" class="tippy-tooltip" id="tooltip7"><p>should work with other too</p></div><section class="footnotes"><hr><ol><li id="fn1"><p>Whatever you want<a href="#fnref1" class="footnote-back">↩</a></p></li><li id="fn2"><p>I think it will work well for most cases<a href="#fnref2" class="footnote-back">↩</a></p></li><li id="fn3"><p>We will configure it later<a href="#fnref3" class="footnote-back">↩</a></p></li><li id="fn4"><p>Whatever you want<a href="#fnref4" class="footnote-back">↩</a></p></li><li id="fn5"><p>You will need it for Jenkins and Github integration<a href="#fnref5" class="footnote-back">↩</a></p></li><li id="fn6"><p>version 2.0.1<a href="#fnref6" class="footnote-back">↩</a></p></li><li id="fn7"><p>should work with other too<a href="#fnref7" class="footnote-back">↩</a></p></li></ol></section><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&#39;https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js&#39;&gt;&lt;/script&gt;
&lt;script src=&#39;/js/attachTooltips.js&#39;&gt;&lt;/script&gt;
&lt;link rel=&#39;styl
      
    
    </summary>
    
    
      <category term="github" scheme="https://abraverm.github.io/tags/github/"/>
    
      <category term="jenkins" scheme="https://abraverm.github.io/tags/jenkins/"/>
    
      <category term="aws" scheme="https://abraverm.github.io/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>Kinect with Unity and libfreenect</title>
    <link href="https://abraverm.github.io/2017/06/11/kinect_unity_libfreenect/"/>
    <id>https://abraverm.github.io/2017/06/11/kinect_unity_libfreenect/</id>
    <published>2017-06-11T04:55:45.000Z</published>
    <updated>2018-07-02T20:06:26.678Z</updated>
    
    <content type="html"><![CDATA[<script src='https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js'></script><script src='/js/attachTooltips.js'></script><link rel='stylesheet' href='/css/tippy.css'><p><a href="https://abraverm.github.io/post/kinectvr_getting_started/">My first attempt with integrating Kinect and Unity</a> with out of the box solution named KinectVR didn’t go well. So I decided to look for another alternative, and found a [similar project based on OpenKinect][2] library (libfreenect). But of course it didn’t compile on my system, which caused me doubt my workspace. The real feeling that was annoying me is that there are so many things I don’t understand how they work in Unity. For example the C# scripting and how things are related and triggered. I was afraid they might be practicing witchcraft, A.K.A [Convention over Configuration][3] like Rails. This drove me to do Unity [tutorial Roll-a-Ball][4] which I have to say was very good and fun. It was also a great method to clean start my workspace.</p><h1 id="getting-started-with-unity-in-linux">Getting started with Unity in Linux</h1><ol type="1"><li>Download the [latest compiled version][5] of Unity for Linux</li></ol><blockquote><p>In theory you might be able to build Unity from source, but I didn’t find a guide for it.</p></blockquote><p>Go to the last post in the thread, and you will see a link like this one: “http://beta.unity3d.com/download/45784aaa9968/public_download.html”</p><p>Download the “Platform-Agnostic Self-Extracting Shell Script”, I got a file named ‘unity-editor-installer-5.4.2f2+20161111.sh’</p><ol start="2" type="1"><li>Install Unity:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x unity-editor-installer-5.4.2f2+20161111.sh</span><br><span class="line">sudo ./unity-editor-installer-5.4.2f2+20161111.sh</span><br><span class="line">mv unity-editor-5.4.2f2 ~/Unity # or anywhere else you want</span><br><span class="line">cp *.desktop $HOME/.local/share/applications</span><br></pre></td></tr></table></figure><p>Next, edit the desktop files and adjust the path to where you install Unity:</p><ul><li><code>$HOME/.local/share/applications/unity-monodevelop.desktop</code></li><li><code>$HOME/.local/share/applications/unity-editor.desktop</code></li></ul><p>For example <code>$HOME/.local/share/applications/unity-monodevelop.desktop</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=0.0.0f0</span><br><span class="line">Name=Unity</span><br><span class="line">Exec=/home/abraverm/Unity/Editor/Unity %F</span><br><span class="line">Exec=/home/abraverm/Unity/Editor/Unity %U</span><br><span class="line">Icon=unity-editor-icon</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">StartupNotify=true</span><br><span class="line">Categories=Development;IDE;Application;</span><br><span class="line">MimeType=x-scheme-handler/com.unity3d.kharma;</span><br></pre></td></tr></table></figure><p>You should be able to find Unity where you find all your other applications. If you want to start Unity from command line, call it directly: <code>~/Unity/Editor/Unity</code> or add it to your PATH (out of scope for this guide).</p><ol start="3" type="1"><li>Run and configure Unity</li></ol><p>Start Unity Editor from your application menu or from the command line. To verify that everything is in order, create a new project, like showed in [Roll-a-Ball tutorial][6]. Create a script in the project, like demonstrated in the next tutorial of [Roll-a-Ball][7], and try to open it.</p><p>If for some reason it doesn’t open, configure Unity to use unity-monodevelop manually, by going in the menu to: <code>Edit -&gt; Prefrences -&gt; External Tools</code> Then click on the drop list of <code>External Script Editor</code> and select <code>browse</code>. Enter <code>~/Unity/MonoDevelop/bin/monodevelop</code>, or wherever you installed Unity. Now its possible to use other editor or globally installed MonoDevelop with package manager, but Unity people configured it to work with Unity well, for example auto-complete C# and nice help quick search. Trust me, I prefer using VIM, and I’m working on making it happen but we are getting started here, right?</p><ol start="4" type="1"><li>Version Control it</li></ol><p>I think that any modern project must have version control, as its the only way we can collaborate and effectively debug issues. My personal favorite version control system is Git, but the following changes easily can be adjusted for any other system. Unity by default stores configurations and other 3d data in binary form. This maybe improve performance on large projects but its a critical blow to version control, as it takes a lot of storage and impossible to version it. So in any project you start working with, you have to do the following:</p><ol type="a"><li>[Make everything in text][9]</li></ol><p><code>Editor → Project Settings → Editor → Asset Serialization Mode: Force Text</code></p><ol start="2" type="a"><li>Ignore temporary and other not to be version controlled files in [<code>.gitignore</code>][10]:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">===============</span><br><span class="line">Unity generated</span><br><span class="line">===============</span><br><span class="line">Temp/</span><br><span class="line">Library/</span><br><span class="line"></span><br><span class="line">=====================================</span><br><span class="line">Visual Studio / MonoDevelop generated</span><br><span class="line">=====================================</span><br><span class="line">ExportedObj/</span><br><span class="line">obj/</span><br><span class="line">*.svd</span><br><span class="line">*.userprefs</span><br><span class="line">/*.csproj</span><br><span class="line">*.pidb</span><br><span class="line">*.suo</span><br><span class="line">/*.sln</span><br><span class="line">*.user</span><br><span class="line">*.unityproj</span><br><span class="line">*.booproj</span><br></pre></td></tr></table></figure><ol start="3" type="a"><li>[Smart merge things][11]</li></ol><p>Add the following text to your .git/config or .gitconfig file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[merge]</span><br><span class="line">tool = unityyamlmerge</span><br><span class="line"></span><br><span class="line">[mergetool &quot;unityyamlmerge&quot;]</span><br><span class="line">trustExitCode = false</span><br><span class="line">cmd = &apos;&lt;path to Unity&gt;/Editor/Data/Tools/UnityYAMLMerge&apos; merge -p &quot;$BASE&quot; &quot;$REMOTE&quot; &quot;$LOCAL&quot; &quot;$MERGED&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Adjust the cmd setting above to the correct path of Unity.</p></blockquote><h1 id="getting-started-with-openkinect">Getting started with OpenKinect</h1><ol type="1"><li>Compile from source</li></ol><p>The OpenKinect library comes with very useful tools and wrappers, and if your OS provides the library, it probably doesn’t come will all the tools and wrappers. In our case we will need the C# wrapper, and for development it would be nice to use fakenect a simulator of Kinect.</p><ol type="a"><li>OpenCV - optional (if want python wrapper too)</li></ol><p>My favorite language is Monty Python, so I prefer having Python wrapper just in case, we are getting started here, right? Python wrapper example require import of cv library, however it was deprecated from latest major version (3) of OpenCV. The problem is that OpenCV 2 is not available in Pip or in your package manager (probably), so we have to [build it ourselves][12][13]:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install requirements(maybe you don't need everthing, or maybe you need more?):</span></span><br><span class="line">dnf install cmake python-devel numpy gcc gcc-c++ gtk2-devel libdc1394-devel \</span><br><span class="line">  libv4l-devel ffmpeg-devel gstreamer-plugins-base-devel libpng-devel \</span><br><span class="line">  libjpeg-turbo-devel jasper-devel openexr-devel libtiff-devel libwebp-devel \</span><br><span class="line">  tbb-devel eigen3-devel python-sphinx texlive</span><br><span class="line"><span class="comment"># I have special directory for this cases at ~/src</span></span><br><span class="line"><span class="built_in">cd</span> ~/src</span><br><span class="line"><span class="comment"># This step will take some time..</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv.git</span><br><span class="line"><span class="comment"># We need our OpenCV version 2</span></span><br><span class="line">git checkout 2.4.13</span><br><span class="line"></span><br><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure</span></span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build - another cup of coffee</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install(?) - I don't need OpenCV for anything else so I don't care installing</span></span><br><span class="line"><span class="comment"># it globallly. If you don't feel like it, well.. hmm.. write a post ;)</span></span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Move the module to Python path</span></span><br><span class="line">sudo cp /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/cv2.so /usr/lib/python2.7/site-packages</span><br></pre></td></tr></table></figure><p>You can verify this works with running: <code>python -c &quot;import cv;print cv.__file__&quot;</code></p><ol start="2" type="a"><li>Configure and Build libfreenect</li></ol><p>The process is pretty [straight forward][8]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Follow the instructions of [Fetch &amp; Build][9] 2. Test and verify</p><h1 id="example-unity-project-with-openkinect">Example Unity project with OpenKinect</h1><p>Running the built project for Linux: <code>mono my_project.x86_64</code></p><p>[2]: [3]: https://en.wikipedia.org/wiki/Convention_over_configuration [4]: https://unity3d.com/learn/tutorials/projects/roll-ball-tutorial [5]: https://forum.unity3d.com/threads/unity-on-linux-release-notes-and-known-issues.350256/ [6]: https://unity3d.com/learn/tutorials/projects/roll-ball-tutorial/setting-game?playlist=17141 [7]: https://unity3d.com/learn/tutorials/projects/roll-ball-tutorial/moving-player?playlist=17141 [8]: https://openkinect.org/wiki/Getting_Started#Manual_Build_on_Linux# [9]: https://docs.unity3d.com/Manual/class-EditorManager.html [10]: https://unity3d.com/learn/tutorials/topics/production/mastering-unity-project-folder-structure-version-control-systems [11]: https://docs.unity3d.com/Manual/SmartMerge.html [12]: http://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html [13]: http://docs.opencv.org/3.1.0/dd/dd5/tutorial_py_setup_in_fedora.html</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      Getting started integrating Kinect and Unity OSS in Linux
    
    </summary>
    
      <category term="VR" scheme="https://abraverm.github.io/categories/VR/"/>
    
      <category term="development" scheme="https://abraverm.github.io/categories/VR/development/"/>
    
    
      <category term="kinect" scheme="https://abraverm.github.io/tags/kinect/"/>
    
      <category term="unity" scheme="https://abraverm.github.io/tags/unity/"/>
    
      <category term="libfreenect" scheme="https://abraverm.github.io/tags/libfreenect/"/>
    
  </entry>
  
  <entry>
    <title>kinectvr_getting_started</title>
    <link href="https://abraverm.github.io/2017/06/09/kinectvr_getting_started/"/>
    <id>https://abraverm.github.io/2017/06/09/kinectvr_getting_started/</id>
    <published>2017-06-09T06:02:23.000Z</published>
    <updated>2018-07-02T18:28:36.341Z</updated>
    
    <content type="html"><![CDATA[<script src='https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js'></script><script src='/js/attachTooltips.js'></script><link rel='stylesheet' href='/css/tippy.css'><p>Last week, my VR partner, Yotam showed me <a href="http://kinectvr.com/" target="_blank" rel="noopener">KinectVR</a> as out of the box solution for our VR setup. We are build an OpenSource based VR development environment where every component from hardware to software is OS, with easiest bootstrap possible. From there we want to build RPG game that will make it realistic as possible. This is a very ambitious project, but I believe we have a good environment for this project and it looks like a very fun project.</p><p>Anyway, we were able to run Unity on Android, which is most affordable VR gear with easiest development platform we found. The next step was to make our body movement traceable in the VR. There are many technologies under development but those that are purchasable are too expansive for starting out. The cheapest technology we thought of for body movement tracking was camera based. I knew Kinect is well developed technology for that. And I remember from my time when I working in robotics laboratory that its a common tool in projects. So there are probably good SDKs for it. Just by chance I have a Kinect at home. Thus we decided to make this work, and Yotam found the KinectVR.</p><p>Because we both want to develop with it, and we have different environment, each will have to setup KinectVR. The problem in my case, is that I have Linux, and KinectVR documentation is for Windows. Let see how it goes:</p><h2 id="step-1-download-software-and-install-things">Step 1: Download software and install things</h2><p>Part of the setup is to have a server connected to Kinect that transmits the movemenents. The server is ‘Kinect-VR-Broadcaster’, in short “broadcaster” that is a NodeJS program. The broadcaster will probably use the Kinect SDK to get the body movements.</p><p>Issue 1 - <a href="https://www.microsoft.com/en-us/download/details.aspx?id=44561" target="_blank" rel="noopener">Kinect official SDK</a> only works on Windows</p><p>But there is an OpenSource version of Kinect SDK - <a href="https://openkinect.org" target="_blank" rel="noopener">OpenKinect</a>, which its library <a href="https://github.com/OpenKinect/libfreenect" target="_blank" rel="noopener">libfreenect</a> is very active (last merge 7 days ago). Maybe… but just maybe… I will be able to make the broadcaster use libfreenect. Worst case scenerio I will make my first contribution for open source VR project. Getting prepared, and made a <a href="https://github.com/abraverm/KinectVR" target="_blank" rel="noopener">fork</a> of our broadcaster.</p><p>Issue 2 - KinectVR shallow clone is 425 MB (!!). This is not source code per say. It seems the project contains many compiled libraries, which I’m not sure are very legal. Issue 3 (?).</p><p>It looks like Unity will be connecting to the Kinect SDK and not NodeJS. I’m not sure what I feel about this. Continue with the documentation: Starting Unity and loading the project. Looks ok-ish. Building the project for Linux - passed… Trying to lunch the build, when I don’t have kinect connected, failed:</p><hr><p>Set current directory to /home/abraverm/VR Found path: /home/abraverm/VR/broadcaster.x86 Mono path[0] = ‘/home/abraverm/VR/broadcaster_Data/Managed’ Mono path<a href="http://kinectvr.com/" target="_blank" rel="noopener">1</a> = ‘/home/abraverm/VR/broadcaster_Data/Mono’ Mono config path = ‘/home/abraverm/VR/broadcaster_Data/Mono/etc’ PlayerConnection initialized from /home/abraverm/VR/broadcaster_Data (debug = 0) PlayerConnection initialized network socket : 0.0.0.0 55162 Multi-casting “[IP] 192.168.1.103 [Port] 55162 [Flags] 3 [Guid] 1790099615 [EditorId] 651863147 [Version] 1048832 [Id] LinuxPlayer(192.168.1.103) [Debug] 1” to [225.0.0.222:54997]… Waiting for connection from host on [192.168.1.103:55162]… Timed out. Continuing without host connection. Using monoOptions –debugger-agent=transport=dt_socket,embedding=1,defer=y,address=0.0.0.0:56615 PlayerConnection already initialized - listening to [192.168.1.103:55162] displaymanager : xrandr version warning. 1.5 client has 8 screens displaymanager screen (0)(HDMI1): 1920 x 1080 Using libudev for joystick management</p><p>Importing game controller configs <a href="http://kinectvr.com/" target="_blank" rel="noopener">1</a> 15781 abort (core dumped) ./broadcaster.x86</p><hr><p>Lets find something useful.. oh god its hard… Start with, the whole thing seems to hard depended on Windows libraries which mean nothing in Linux. I can’t find a reasonable way to debug the whole thing. Seems like there is some sort of Unity-Mono integration, which refuses to work on my system. The internal MonoDevelop doesn’t work at all, and my external hangs on opening the script files. I think this is some sort of POC done by students, as the project doesn’t have any updates since 8 month ago. I have no interest in fixing it. But I will keep it for reference.</p><blockquote><p>sigh</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      KinectVR on Linux
    
    </summary>
    
      <category term="VR" scheme="https://abraverm.github.io/categories/VR/"/>
    
    
      <category term="kinect" scheme="https://abraverm.github.io/tags/kinect/"/>
    
      <category term="nodejs" scheme="https://abraverm.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>aspell causing problems to weechat</title>
    <link href="https://abraverm.github.io/2017/06/07/aspell_causing_problems_to_weechat/"/>
    <id>https://abraverm.github.io/2017/06/07/aspell_causing_problems_to_weechat/</id>
    <published>2017-06-07T05:25:06.000Z</published>
    <updated>2018-07-02T13:58:50.269Z</updated>
    
    <content type="html"><![CDATA[<script src='https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js'></script><script src='/js/attachTooltips.js'></script><link rel='stylesheet' href='/css/tippy.css'><p>From time to time I see in my WeeChat window some messed up error:</p><p><code>EOF while looking for matching '</code></p><p>Now I already figured out that aspell is causing it, and I can disable it, but I need it for spell checking. I thought maybe the spellchecker triggering it in aspell somehow, but that wasn’t it. Google not helping me either. I can’t reproduce this because it happens out of the blue, like apsell is checking buffer spelling or something. I don’t know. I will keep publishing updates on this when ever I find it annoying enough to fix.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      Weechat polluted with `EOF while looking for matching`
    
    </summary>
    
      <category term="todo" scheme="https://abraverm.github.io/categories/todo/"/>
    
    
      <category term="aspell" scheme="https://abraverm.github.io/tags/aspell/"/>
    
      <category term="weechat" scheme="https://abraverm.github.io/tags/weechat/"/>
    
      <category term="bug" scheme="https://abraverm.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Hugo sharing bookmarks</title>
    <link href="https://abraverm.github.io/2017/05/27/hugo_sharing_bookmarks/"/>
    <id>https://abraverm.github.io/2017/05/27/hugo_sharing_bookmarks/</id>
    <published>2017-05-27T07:41:05.000Z</published>
    <updated>2018-07-02T15:24:45.295Z</updated>
    
    <content type="html"><![CDATA[<script src='https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js'></script><script src='/js/attachTooltips.js'></script><link rel='stylesheet' href='/css/tippy.css'><p>One the reasons I’ve started a blog is to have a place to record my journey and adventures. Each post is a record of what I’ve done. This is mostly for myself, as sometimes I get back to same point doing a different path and its nice to mark those points. Part of an adventure is a lot of browsing and learning of new things. Some of the gems I find are not related to the subject in matter, but non the less I want to save it for other time. I end up with huge pile of open tabs in Firefox. Which right now I manage with tab groups and smart key bindings but its really not such a good system. Also I want to share those gems just as much as my posts, but not all of them fit in. But today I think I found something that might work.</p><p>My wife asked me about how I manage my tasks and personal thoughts, so I told her about Vim-wiki. She is not a Vim user, so I just showed her how a personal wiki works for me. Next, she decides that its only true to give me back her gem of productivity and gives me introduction to <a href="https://getpocket.com" target="_blank" rel="noopener">Pocket</a>. I’ve noticed this <a href="https://blog.mozilla.org/blog/2017/02/27/mozilla-acquires-pocket/" target="_blank" rel="noopener">Pocket thingy in newer versions of Firefox</a>, but I didn’t give it a lot of thought. After showing it to me, I thought “Is there a way I can share the things in my pocket”. Quick web search gave me <a href="http://jlord.us/sheetsee-pocket/" target="_blank" rel="noopener">this little amazing gem</a>. I was amazed as it was exactly what I wanted.</p><p><a href="https://github.com/jlord" target="_blank" rel="noopener">Jessica Lord</a> created amazingly simple solution that creates:</p><blockquote><p>“A website for your Pocket article archive. Fork-n-Go set up.”</p></blockquote><p><img src="/images/meme_aww.jpg#floatright" alt="aww"> Using IFTTT, you stream the saved web sites in Pocket to a Google sheet, and her amazing repository just parse the Google sheet into a cool web site. The instructions are in the Readme, and it was pretty simple to setup. The only problem, IFTTT doesn’t work :(. I’ve tried their documentation and even mailing them, all I got is “we are too busy for you”. So I took a pick at Zapier, alternative to IFTTT. They to have support for Pocket and Google sheets, but they get each article tags a separate fields, which is useless to me and all their internal utilities didn’t help. I started looking for other alternative services, but non support Pocket. I was annoyed even more so I went for my own open source service, <a href="https://github.com/huginn/huginn" target="_blank" rel="noopener">Huginn</a>. I know its probably doesn’t support Pocket out of the box, but fuck it, I will write extension and share it with awesome people who use it. But damn… neither Pocker or Google drive are supported.</p><p>I was excited with the idea (before IFTTT failed me) and started adding bookmarks, but the new problem I encountered was how do I tag them right?</p><p>For example, yesterday I stumbled on <a href="https://en.wikipedia.org/wiki/Xpra" target="_blank" rel="noopener">Xpra</a> when trying to solve the sound issue I have with my containerized Firefox. I noticed that some people use Xpra instead of sharing host resources with the container - interesting. But after reading what Xpra does, it seems to me like a neat tool I can utilize for other purposes, but at least have it as alternative for NX, VNC and X forwarding. So what tags should I give it?</p><p>docker, remote desktop, remote application, X, persistent</p><p>Look at those tags, they don’t do justice with Xpra awesomeness, its like a bad CV. Also what if I have a bookmark I want to relate both, the only option I can think of is using ‘xpra’ tag.</p><p>It came to my mind I need to make a new type of content in my blog: Ideas. Then bookmarks will have the idea as their tag too, this can give more information about the bookmark and have references for the idea.</p><p>Anyway until I will have new interest in Huginn or IFTTT will start working or something, I’m going to leave this in the todo category.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      How to share bookmarks from Pocket in Hugo
    
    </summary>
    
      <category term="blog" scheme="https://abraverm.github.io/categories/blog/"/>
    
      <category term="development" scheme="https://abraverm.github.io/categories/blog/development/"/>
    
      <category term="todo" scheme="https://abraverm.github.io/categories/blog/development/todo/"/>
    
    
      <category term="github" scheme="https://abraverm.github.io/tags/github/"/>
    
      <category term="pocket" scheme="https://abraverm.github.io/tags/pocket/"/>
    
      <category term="hugo" scheme="https://abraverm.github.io/tags/hugo/"/>
    
      <category term="ifttt" scheme="https://abraverm.github.io/tags/ifttt/"/>
    
      <category term="huginn" scheme="https://abraverm.github.io/tags/huginn/"/>
    
      <category term="xpra" scheme="https://abraverm.github.io/tags/xpra/"/>
    
  </entry>
  
  <entry>
    <title>Ansible role with Test Kitchen</title>
    <link href="https://abraverm.github.io/2017/05/26/ansible_role_with_test_kitchen/"/>
    <id>https://abraverm.github.io/2017/05/26/ansible_role_with_test_kitchen/</id>
    <published>2017-05-26T17:20:41.000Z</published>
    <updated>2018-07-02T13:53:06.640Z</updated>
    
    <content type="html"><![CDATA[<script src='https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js'></script><script src='/js/attachTooltips.js'></script><link rel='stylesheet' href='/css/tippy.css'><p>&lt;%- toc(page.content) %&gt;</p><p>I’ve started working on a new Ansible role, and this is the first upstream project that I feel like to be responsible of. As a DevOps engineer it is important for me to build a good CI, both for upstream and downstream, for development and testing. With the tools I believe in, I started building the CI of the Ansible role, and I was surprised that it was a bit different from anything else on the net. I would like to share with you <strong>how to built upstream CI for Ansible role with Test Kitchen</strong>.</p><h2 id="ansible-role">Ansible Role</h2><blockquote><p>Roles are ways of automatically loading certain vars_files, tasks, and handlers based on a known file structure. Grouping content by roles also allows easy sharing of roles with other users. Roles are just automation around ‘include’ directives as described above, and really don’t contain much additional magic beyond some improvements to search path handling for referenced files.</p></blockquote><p>In other words, Ansbile role is just a complicated playbook for specific task. For example <a href="https://github.com/abraverm/ansible-logstash" target="_blank" rel="noopener">installing and configuring a service such as Logstash</a>. Ansible role sharing is mostly done with Ansible Galaxy tool, if it by <a href="http://docs.ansible.com/ansible/galaxy.html#version" target="_blank" rel="noopener">specifying the Git repository of the role</a>, or from <a href="http://docs.ansible.com/ansible/galaxy.html#id3" target="_blank" rel="noopener">published version in the web</a>. By keeping variables managed outside the role, its quite possible to share many of the roles with the community. But working with other people require a common baseline of discussion, and that’s why testing is critical. Local testing has to be easy and fast to not hold the developer and at the same breath legitimize the work being done. Upstream testing is trusting a third party on the changes being submitted based on agreed testing.</p><h2 id="test-kitchen">Test Kitchen</h2><blockquote><p><a href="http://kitchen.ci/" target="_blank" rel="noopener">Test Kitchen</a> is an integration tool for developing and testing infrastructure code and software on isolated target platforms.</p></blockquote><p>In other words, Test Kitchen is a testing framework for configuration management.</p><h3 id="how-it-works">How it works</h3><p>Example Test Kitchen configuration file <code>.kitchen.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">driver:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">docker</span></span><br><span class="line"></span><br><span class="line"><span class="attr">provisioner:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ansible</span></span><br><span class="line"></span><br><span class="line"><span class="attr">platforms:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">ubuntu-14.04</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">fedora-25</span></span><br><span class="line"></span><br><span class="line"><span class="attr">verifier:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">inspec</span></span><br><span class="line"></span><br><span class="line"><span class="attr">suites:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">use_case_1</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">use_case_2</span></span><br></pre></td></tr></table></figure><p>Test Kitchen will create a test matrix:</p><ul><li>ubuntu-14.04-use_case_1</li><li>ubuntu-14.04-use_case_2</li><li>fedoar-25-use_case_1</li><li>fedoar-25-use_case_2</li></ul><p>For each test, kitchen will do:</p><ol type="1"><li>deploy a docker container for the specified platform</li><li>Apply playbook of specified use case</li><li>Verify the results with Inspec for that use case</li></ol><h3 id="why-is-it-a-very-good-ci-framework">Why is it a very good CI framework</h3><p>First of all, Test kitchen implements all <a href="https://en.wikipedia.org/wiki/Continuous_integration#Best_practices" target="_blank" rel="noopener">best practices of Continuous Integration</a> in my opinion but I think there is more to it:</p><ul><li><strong>Local development vs Remote verification</strong> - One of the most common problems I hear from engineers is the difficulty of testing their changes just the same as integration system, Jenkins for example. And it more annoys them when it works locally but not in the shared testing environment. Test Kitchen handles this problem by letting the engineer use <strong>same infrastructure</strong>. Test Kitchen has many plugins that support different infrastructures, called ‘driver’, local such as Docker or remote (clouds) such as OpenStack. In downstream, company internal, development it is better to use private clouds where as developer you are focused on development, and the company is focused on providing the infrastructure. Also, developers can share test environment for investigation. For upstream, public projects, using local based infrastructure such as Docker or Vagrant is a slim way for describing the testing environment and free from system dependency such as versions. Later in the post I will show how to make Test Kitchen work with public CI system - Travis-CI.</li><li><strong>Plugin based architecture</strong> - It seem obvious, but the fact that Test Kitchen architecture is plugin based, makes it flexible to CI world. It means for the maintainer to be able to adjust his CI to the needs of the project. But also to reuse the framework in other project with different needs. There are cases where company might decide to refactor the automation to another language such as from scripts to configuration management with common test process.</li><li><strong>Dynamic test framework</strong> - One of the less known features of Test Kitchen, is that the configuration file is actually compiled prior to loading. The file is compiled with <a href="https://apidock.com/ruby/ERB" target="_blank" rel="noopener">ERB</a>, which allows the configuration to be adjusted to its environment.</li><li><strong>Shared tests</strong> - Using Inspec for verifying the deployment will allow you to load testing <a href="https://www.inspec.io/docs/reference/profiles/" target="_blank" rel="noopener">profiles</a> from remote repositories, this will allow setting testing standards cross project.</li></ul><h2 id="travis-ci">Travis-CI</h2><p>As mentioned above, upstream projects need to be tested by a third party and one popular system is <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis-CI</a> which offers free CI for open source projects, and <a href="https://travis-ci.org/getting_started" target="_blank" rel="noopener">integrates very well with GitHub</a>. The most important feature it has for Ansible is <a href="https://docs.travis-ci.com/user/docker/" target="_blank" rel="noopener">Docker container service</a>. The service allows building Docker images and running containers in a single job. This will be the common ground for Test Kitchen (local CI) and Travis-CI (public CI). Travis also allows running [matrix testing], when the focus is the language version and a set of environment variables. For Ansible the language is Python, but we can consider Ansible version as a factor for testing the module. With that you will have matrix testing of (Ansible version)x(Platform)x(use case). Unfortunately there is no working out of the box Ansible version manager/switcher, except maybe with Python virtualenv.</p><h2 id="template">Template</h2><p>Best examples are the one being used, so checkout my <a href="https://github.com/abraverm/ansible-logstash" target="_blank" rel="noopener">logstash role</a> for complete solution, or download the <a href="http://bundler.io/" target="_blank" rel="noopener">template from GitHub</a>. The following is a detailed cover of the template structure.</p><p>The file structure of the template:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .gitignore</span><br><span class="line">├── .kitchen.yml</span><br><span class="line">├── .travis.yml</span><br><span class="line">├── defaults</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── Gemfile</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── LICENSE</span><br><span class="line">├── meta</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── README.md</span><br><span class="line">├── tasks</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   ├── ansible.cfg</span><br><span class="line">│   ├── init_scripts</span><br><span class="line">│   │   └── fedora</span><br><span class="line">│   └── integration</span><br><span class="line">│       └── default</span><br><span class="line">│           ├── ansible</span><br><span class="line">│           │   └── playbook.yml</span><br><span class="line">│           ├── controls</span><br><span class="line">│           │   └── my_role_spec.rb</span><br><span class="line">│           └── inspec.yml</span><br><span class="line">└── vars</span><br><span class="line">    └── main.yml</span><br></pre></td></tr></table></figure><h3 id="ansible-role-1">Ansible role</h3><p>Ansible role has a default file structure that you can start with by running <code>ansible-galaxy init &lt;name of the module&gt;</code>. It will create a directory with the name of the module, and the following file structure:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── defaults</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── meta</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── README.md</span><br><span class="line">├── tasks</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── tests</span><br><span class="line">│   ├── inventory</span><br><span class="line">│   └── test.yml</span><br><span class="line">└── vars</span><br><span class="line">    └── main.yml</span><br></pre></td></tr></table></figure><p>When using Test Kitchen, you don’t need ‘tests’ directory, because it looks for ‘test’ directory and different file structure in it.</p><blockquote><p>Note: it is highly recommended to maintain ‘meta/main.yml’ well as its critical for ansible-galaxy tool and for publishing to Ansible Galaxy.</p></blockquote><p>Other information on Ansible role development and structure you will find in Ansible documentation.</p><h3 id="test-kitchen-1">Test Kitchen</h3><p>Test Kitchen consists of three main parts:</p><ul><li>Gemfile - preparing your system to run Test Kitchen</li><li>.kitchen.yml - how Test Kitchen is executed</li><li>tests/ - the tests that will be executed by Test Kitchen</li></ul><p>Gemfile is used by a tool named <a href="http://bundler.io/" target="_blank" rel="noopener"><code>bundler</code></a> to install gems, which are ruby libraries. In our case, the Gemfile will look like this:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source <span class="string">'https://rubygems.org'</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'test-kitchen'</span></span><br><span class="line">gem <span class="string">'inspec'</span></span><br><span class="line">gem <span class="string">'kitchen-docker'</span></span><br><span class="line">gem <span class="string">'kitchen-inspec'</span></span><br><span class="line">gem <span class="string">'kitchen-ansiblepush'</span></span><br></pre></td></tr></table></figure><p>So your automation and users can prepare their environment by just running <code>bundle install</code>. Gemfiles can be much more complex to cover different cases and it designed for developers to clarify what required of the ruby environment. I also believe in simplicity, so don’t over complicate this file until you need to.</p><p>Next is the <code>.kitchen.yml</code> file that used by Test Kitchen how exactly to run things and it will look similar to this:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">driver:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">docker</span></span><br><span class="line"><span class="attr">  socket:</span> <span class="attr">unix:///var/run/docker.sock</span></span><br><span class="line"><span class="attr">  privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  use_sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  hostname:</span> <span class="string">"simple"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">provisioner:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ansible_push</span></span><br><span class="line"><span class="attr">  chef_bootstrap_url:</span> <span class="string">nil</span></span><br><span class="line"><span class="attr">  ansible_config:</span> <span class="string">"test/ansible.cfg"</span></span><br><span class="line"><span class="attr">  idempotency_test:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  diff:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">platforms:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">fedora-25</span></span><br><span class="line"><span class="attr">    driver:</span></span><br><span class="line"><span class="attr">      run_command:</span> <span class="string">/start</span></span><br><span class="line"><span class="attr">      run_options:</span> <span class="bullet">--tty</span> <span class="bullet">-e</span> <span class="string">'container=docker'</span></span><br><span class="line"><span class="attr">      provision_command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">dnf</span> <span class="string">install</span> <span class="bullet">-y</span> <span class="string">python</span> <span class="string">systemd</span> <span class="string">python2-dnf</span></span><br><span class="line"><span class="attr">      volume:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">$PWD/test/init_scripts/fedora:/start:ro</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/sys/fs/cgroup:/sys/fs/cgroup:ro</span></span><br><span class="line"></span><br><span class="line"><span class="attr">verifier:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">inspec</span></span><br><span class="line"></span><br><span class="line"><span class="attr">suites:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">    provisioner:</span></span><br><span class="line"><span class="attr">      playbook:</span> <span class="string">"test/integration/default/ansible/playbook.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">configured</span></span><br><span class="line"><span class="attr">    provisioner:</span></span><br><span class="line"><span class="attr">      playbook:</span> <span class="string">"test/integration/configured/ansible/playbook.yml"</span></span><br></pre></td></tr></table></figure><p>I don’t have really power at the moment explaining all the bits and bolts of what it does, so if you have question, feel free to comment, write me an email, or ping me on IRC. I promise to answer and add it here. But here is the key points:</p><ul><li>Test Kitchen will use Docker as the backend for testing environment. It will run against different Docker images (platforms), in this case only fedora-25. The image is rather minimal and some modifications are needed. I feel they are small enough to not be in a Dockerfile. The reason I choose Docker, is because its light, easy to distribute and can run on developer environment and CI environment (Travis) and it has a very large community.</li><li>Ansible is <strong>usually</strong> push driven, meaning, Ansible is executed locally and does things on remote target. Also not every environment will able to install Ansible to be executed in it. That’s why Test Kitchen should use the ‘ansible_push’ provisioner and not ‘ansible’. Last, this will allow you to test the role with different versions of Ansible in Travis, as I will show you later on.</li><li>Every test case is called ‘suite’ in Test Kitchen, and the default path for needed files are at <code>test/integration/&lt;suite name&gt;</code>. I thought a good place to put ansible playbook at <code>test/integration/&lt;suite name&gt;/ansible/playbook.yml</code>. In the suite directory you will find verification tool files, for inspec it will be <code>inspec.yml</code> and <code>controls\something_spec.rb</code>. Read Inspec documentation on how to verify your playbooks.</li></ul><p>Last, the <code>test/</code> directory… oh wait I just covered it in the last key point above. But I did forget to mention that I also used it to store other files: - <code>ansible.cfg</code> - used by ansible_push to find the ansible role:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">roles_path=../:../../:/spec/</span><br></pre></td></tr></table></figure><ul><li><code>init_scripts</code> - scripts used by Docker as the commands to start the container with, for example to make systemd to work in the container.</li></ul><p>So basically feel free to put anything related to Test Kitchen in tests directory.</p><p>When you run Test Kitchen, it might create all sort of temporary files, make sure to avoid polluting your Git repository with <code>.gitignore</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gemfile.lock</span><br><span class="line">.kitchen</span><br><span class="line">**/*.retry</span><br></pre></td></tr></table></figure><h3 id="travis-ci-1">Travis-CI</h3><p>After you <a href="https://travis-ci.org/getting_started" target="_blank" rel="noopener">get started with Travis</a> and connect your GitHub to it, here is an example of <code>.travis.yml</code> for you:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">docker</span></span><br><span class="line"></span><br><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span> <span class="string">"2.7"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ANSIBLE_VERSION=latest</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ANSIBLE_VERSION=2.3.0.0</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ANSIBLE_VERSION=2.2.0.0</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ANSIBLE_VERSION=2.1.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span> <span class="string">pip</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="comment"># Make sure everything's up to date.</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">update</span> <span class="bullet">-qq</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="bullet">-qq</span> <span class="string">python-apt</span> <span class="string">python-pycurl</span> <span class="string">git</span> <span class="string">python-pip</span> <span class="string">ruby</span> <span class="string">ruby-dev</span> <span class="string">build-essential</span> <span class="string">autoconf</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">gem</span> <span class="string">install</span> <span class="string">bundler</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="comment"># Install Test Kitchen and its dependencies</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bundle</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Install Ansible</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">if</span> <span class="string">[</span> <span class="string">"$ANSIBLE_VERSION"</span> <span class="string">=</span> <span class="string">"latest"</span> <span class="string">];</span> <span class="string">then</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">ansible;</span> <span class="string">else</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">ansible==$ANSIBLE_VERSION;</span> <span class="string">fi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">export</span> <span class="string">ANSIBLE_CONFIG="test/ansible.cfg"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ansible</span> <span class="bullet">--version</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">docker</span> <span class="string">version</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">sudo</span> <span class="string">locale-gen</span> <span class="string">en_US.UTF-8</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bundle</span> <span class="string">show</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">LANG=en_US.UTF-8</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">kitchen</span> <span class="bullet">--version</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">LANG=en_US.UTF-8</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">kitchen</span> <span class="string">test</span> <span class="bullet">-d</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">echo</span> <span class="string">"Success"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">  webhooks:</span> <span class="attr">https://galaxy.ansible.com/api/v1/notifications/</span></span><br></pre></td></tr></table></figure><p>I think most of it speaks for it self, but as I mentioned earlier, the beauty in this case is cross Ansible version testing with the ‘env’ section. You can also have cross python validation, and it costs you nothing, but I don’t feel like its really needed at the beginning. Travis has many more features like awesome notifications but this is really a good starting point IMHO.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      Ansible role development and testing with Test Kitchen in upstream
    
    </summary>
    
      <category term="development" scheme="https://abraverm.github.io/categories/development/"/>
    
    
      <category term="ansible" scheme="https://abraverm.github.io/tags/ansible/"/>
    
      <category term="test kitchen" scheme="https://abraverm.github.io/tags/test-kitchen/"/>
    
      <category term="travis-ci" scheme="https://abraverm.github.io/tags/travis-ci/"/>
    
  </entry>
  
  <entry>
    <title>LastPass is dead! Hail the new manager</title>
    <link href="https://abraverm.github.io/2017/05/26/lastpass_is_dead_hail_the_new_king/"/>
    <id>https://abraverm.github.io/2017/05/26/lastpass_is_dead_hail_the_new_king/</id>
    <published>2017-05-26T15:34:15.000Z</published>
    <updated>2018-07-02T18:29:34.499Z</updated>
    
    <content type="html"><![CDATA[<script src='https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js'></script><script src='/js/attachTooltips.js'></script><link rel='stylesheet' href='/css/tippy.css'><p>About two weeks ago LastPass Firefox plugin was updated and I started to notice that Firefox is taking much more resources. We all know that the browser is a heavy cow on the system, and now its a cow with a wagon. My beast laptop, ThinkPad W541, handled it without sweat with a bit of struggle on cold start and restoring large sessions. I didn’t think about it too much until I was trying to put <a href="https://abraverm.github.io/post/fire_in_two_boxes/">Firefox in a container</a>, which required lots of restarts. Every cold restart Firefox was asking about hanging javascript from the lovely LastPass. And guess what, when I disabled LastPass Firefox became blazing fast, like a running bull. So I left it disabled and didn’t think about it too much.</p><p><img src="/images/wondering_meme.png#floatright"> Fortunately, few days later I was working on a new deployment and needed a place to store and share passwords. I was wondering why can’t we share passwords with Git or something, where there is no need in a dedicated server. After short search I found <a href="https://github.com/justwatchcom/gopass" target="_blank" rel="noopener">GoPass</a> which was exactly what I was looking for. Now, GoPass is based on more popular tool called <a href="https://www.passwordstore.org/" target="_blank" rel="noopener">pass</a>, and it has support for Firefox… and it can import passwords from LastPass…</p><p>Go back, what is <code>pass</code>:</p><blockquote><p>Password management should be simple and follow Unix philosophy. With pass, each password lives inside of a gpg encrypted file whose filename is the title of the website or resource that requires the password. These encrypted files may be organized into meaningful folder hierarchies, copied from computer to computer, and, in general, manipulated using standard command line file management utilities.</p></blockquote><p>What is <code>gopass</code>:</p><blockquote><p>The slightly more awesome Standard Unix Password Manager for Teams. Written in Go.</p></blockquote><p>Theoretically you can use <code>pass</code> for shared passwords, but <code>gopass</code> does it much easier. To get started you can follow these guides:</p><ul><li><a href="https://git.zx2c4.com/password-store/about/#EXTENDED%20GIT%20EXAMPLE" target="_blank" rel="noopener">pass detailed example</a></li><li><a href="https://www.madboa.com/geek/gpg-quickstart/" target="_blank" rel="noopener">GPG quick start</a></li><li><a href="http://moser-isi.ethz.ch/gpg.html" target="_blank" rel="noopener">GPG for Daily Use</a></li><li><a href="https://wiki.gentoo.org/wiki/GnuPG" target="_blank" rel="noopener">Gentroo GnuPG wiki</a></li><li><a href="https://wiki.archlinux.org/index.php/GnuPG" target="_blank" rel="noopener">Arch GnuPG wiki</a></li></ul><p>I was excited, and started migrating from LastPass, when I remembered there is <a href="https://git.zx2c4.com/password-store/tree/contrib/importers/lastpass2pass.rb" target="_blank" rel="noopener">automation for it</a>. But damn, it doesn’t work with <code>gpg-agent</code> for some unknown hellish reason. And I had more than 300 passwords(?!). So the script kept asking me for password to open my GPG key, and its pretty long to type. First I thought “well this is a case for ops”, and starting shift-inserting my password. After 20 imports I gave up. Next I developed a <code>expect</code> script, which BTW took <strong>longer than the ops approach</strong>. Anyway, if you encounter this problem, here is the script:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Fuck! I lost it...</span><br><span class="line">Good luck to you ;)</span><br></pre></td></tr></table></figure><p>Finally I got all most all of my password in <code>pass</code>, victory! Now… how I’m using it in my containerized Firefox?</p><ol type="1"><li>Install gpg inside the container <code>RUN dnf install -y gnupg</code></li><li>I will probably need pass in it too <code>RUN dnf install -y pass</code></li><li>Add the Firefox plugin <a href="https://addons.mozilla.org/en-US/firefox/addon/passff/" target="_blank" rel="noopener">PassFF</a></li></ol><p>That’s it, should work out of the box. In your dreams…</p><p>PassFF listed all the credentials but unable to get them. Tried another plugin for Firefox - <a href="https://addons.mozilla.org/en-US/firefox/addon/browserpass/" target="_blank" rel="noopener">Browserpass</a> - no luck. Step back, <code>docker exec -it firefox_Personal2 bash</code> and <code>pass github.com</code> asking for GPG password.</p><p>Not this again…</p><p>OK. Let’s share the GPG agent with the container: <code>/run/user/1000/gnupg/S.gpg-agent</code>, no luck, and ‘yes’ I made sure to connect to the agent <code>gpg-connect-agent /bye</code>. For some reason, gpg-agent in the container created a socket in <code>~/.gnupg/</code>. I tried so many things and googled the shit out of it. And then I found it!</p><p><img src="/images/Computer-Guy-Facepalm.jpg#floatleft" alt="facepalm"> The problem was with <code>gpg</code> command, while works fine with <code>gpg2</code>. And what about pass? <a href="https://github.com/zx2c4/password-store/blob/master/src/password-store.sh#L12" target="_blank" rel="noopener">pass prefers gpg2</a>, why isn’t it working?</p><p><strong>Because <code>which</code> is not installed in fedora containers.</strong></p><p>The last problem is one that I actually thought off during all the testing, was how to enter the password for GPG key the first time? The answer lies in gpg-agent ‘pinentry-program’ setting, I’ve installed <code>pinentry-gtk</code> package and set the program to <code>/usr/bin/pinentry</code>. I also changed the TTL to something reasonable. The final result looks like this <code>~/.gnupg/gpg-agent.conf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">default-cache-ttl 999999</span><br><span class="line">max-cache-ttl 999999</span><br><span class="line">pinentry-program /usr/bin/pinentry</span><br><span class="line">allow-loopback-pinentry</span><br></pre></td></tr></table></figure><p><img src="/images/pc_gazing_meme.jpg#floatright" alt="gaze"> Now pass works from shell. Going back to Firefox, and… it still doesn’t work.</p><blockquote><p>sigh</p></blockquote><p>Well I can try to make this plugin work, but do I really need it? I mean, anyway I wanted to make LastPass work with Vimperator, maybe there is a script for pass, geeky enough, no?</p><p>Well there is no such script, but it shouldn’t be too hard. Just to make sure, I searched the web, and I found <a href="https://github.com/ervandew/keyring/blob/master/vimperator/plugin/keyring.js" target="_blank" rel="noopener">something close for ‘keyring’ tool</a>. So I did some manipulations to it and <a href="https://gist.github.com/abraverm/9ff7599cd89c2b316483dec13172ab85" target="_blank" rel="noopener">ta-dam!</a> I have pass working from Firefox with Vimperator!</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      How I stopped worrying about CPU and found peace with Pass
    
    </summary>
    
      <category term="UI" scheme="https://abraverm.github.io/categories/UI/"/>
    
      <category term="system" scheme="https://abraverm.github.io/categories/UI/system/"/>
    
      <category term="security" scheme="https://abraverm.github.io/categories/UI/system/security/"/>
    
      <category term="development" scheme="https://abraverm.github.io/categories/UI/system/security/development/"/>
    
    
      <category term="firefox" scheme="https://abraverm.github.io/tags/firefox/"/>
    
      <category term="gpg" scheme="https://abraverm.github.io/tags/gpg/"/>
    
      <category term="vimperator" scheme="https://abraverm.github.io/tags/vimperator/"/>
    
      <category term="pass" scheme="https://abraverm.github.io/tags/pass/"/>
    
  </entry>
  
  <entry>
    <title>Who needs browser anyway</title>
    <link href="https://abraverm.github.io/2017/05/24/fire_in_two_boxes/"/>
    <id>https://abraverm.github.io/2017/05/24/fire_in_two_boxes/</id>
    <published>2017-05-24T15:35:35.000Z</published>
    <updated>2018-07-02T14:01:08.708Z</updated>
    
    <content type="html"><![CDATA[<script src='https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js'></script><script src='/js/attachTooltips.js'></script><link rel='stylesheet' href='/css/tippy.css'><h2 id="prologue">Prologue</h2><p>It all started with thinking “If I can just run Firefox in Tmux pane, that would be great…”</p><figure><img src="/images/meme_great.jpg" alt="great"><figcaption>great</figcaption></figure><p>And I really tried to look for something worthy of my needs, but in vein. After long searching and wondering what I want, is basically have Firefox X window rendered somehow in CLI. Like one of the ASCII art thingy but continuously, maybe avoiding pictures or videos. Well, I found <a href="https://github.com/tombh/texttop" target="_blank" rel="noopener">TextTop</a> but I haven’t tried it and the video doesn’t seem promising to me. I need to have a clear text.</p><p>Why? 90% of my work I spent in those two places, why not make it one? Easier context switching, workflow automation and maybe much more. But it can’t really be done without Firefox or any modern browser major functionalities, such as plugins, web rendering with Javascript. Its amazing how much we rely on this functionalities on our daily web browsing. If you don’t believe me, try for yourself w3m and links cli browsers.</p><h2 id="change-of-view">Change of view</h2><p>I didn’t gave up, just changed the approach a bit. When I thought about it, there are some regular domains that I visit, For example Stack-overflow and Google. So what if I minimize my needs of a browser to specific situations where the terminal can’t handle it without overhead. I searched the web and found two potential tools:</p><ul><li><a href="https://github.com/jarun/googler" target="_blank" rel="noopener">googler</a> - Google Site Search from the command-line</li><li><a href="https://github.com/gautamkrishnar/socli" target="_blank" rel="noopener">socli</a> - Stack Overflow command line written in python</li></ul><p>I do a lot of searches, if it of errors or general subject. I was hoping with this tools I will be able to do it faster and easier. In reality, googler is slow to start and socli does generic questions only, that is searching for errors won’t work. Another problem that I encountered at the beginning was how to open URL with the right profile in Firefox?</p><p>I have two Firefox profiles, one for work and another for home. So when I use googler I want to send the found result to the right profile. But when you have two Firefox profiles open, it means one of them was started with <code>no-remote</code> option: <code>--no-remote        Do not accept or send remote commands;</code>. Which means that only one Firefox profile can receive URL links from external program like googler. I hate that programs try to limit me in such stupid ways. I got triggered, and started working on a solution.</p><h2 id="firefox-in-a-box">Firefox in a box</h2><p>When I say box, I mean container, Docker container. Why? Because then Firefox doesn’t know about other processes beside him, he is in a box!</p><p>It ain’t hard running <a href="https://github.com/abraverm/docker-images/tree/firefox" target="_blank" rel="noopener">Firefox in a container</a>, the problem is getting everything else to work with it:</p><ul><li>Fonts</li><li>Vimperator scripts</li><li>Flash</li><li>Special plugins like Spice</li><li>Password management</li><li>Sound</li><li>Downloads</li><li>Kerberos</li><li>GPG</li></ul><p>And then you have bugs, like why I can’t forward online videos. I don’t have a magical Dockerfile that solve all the problems, but I can say it works good enough for me.</p><p>After lunching the two different Firefox instances, came another annoying issue, how to tell googler which Firefox to send the URL to? Well the documentation says use <code>BROWSER</code> environment variable, but it work-ish. I was able to tell googler to open the links with w3m but it continued opening the same Firefox instance. During my try-error-search process, I stumbled on ‘sensible-browser’ tool that looks like was the default tool in Ubuntu for finding a browser in the system, and one of the ways to overwrite it was set <code>BROWSER</code> environment variable. I did a wrong 1+1, and installed sensible-browser. It didn’t help… Then I thought “maybe… just maybe.. googler doesn’t like when you pass option to BROWSER”. I mean, I was trying to run this command:</p><p><code>docker exec -d firefox_work firefox -P work</code></p><p>And it works fine from CLI, so why not from a program. The reason I thought this might be the root cause is the past experience in Vimperator when I tried running such command in Javascript. Hint: They don’t like it.</p><p>So I did a stupid script <code>~/bin/dfirefox_open_work</code>: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">docker <span class="built_in">exec</span> -d firefox_work firefox -P work <span class="variable">$@</span></span><br></pre></td></tr></table></figure></p><p>Walla! it works…</p><h2 id="googler">Googler</h2><p>From here it was just semantics. Now I have two commands for googler so I can lunch URL in the right Firefox. Since then, I almost didn’t use the command. Reasons:</p><ul><li>slow to start but works fast when up =<br></li><li>It doesn’t highlight the words in the results, which makes it visually harder to determine the quality of the link</li><li>It could’ve been nice to have more lines from each result</li><li>Very important - I don’t know if I already visited that page</li></ul><p>I wished I could’ve had a minimal version of the site, without all the menus and other affects, just to have the gist of it, like Firefox read mode. When I wrote this, I said “why not”, and started digging. So there is a readability mode in Firefox, and there is a service to do it called <a href="https://mercury.postlight.com/web-parser/" target="_blank" rel="noopener">Mercury</a>. I found a <a href="https://gist.github.com/tanimislam/7f36db977ffd254691840ca14534e5b2" target="_blank" rel="noopener">script</a> that creates an HTML file from Mercury API call. With it I created my own script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">tmpfile=$(mktemp /tmp/mercury.XXXXXX.html)</span><br><span class="line"><span class="variable">$HOME</span>/bin/mercury_parse.py --url <span class="variable">$@</span> --htmlfile <span class="variable">$tmpfile</span></span><br><span class="line">w3m <span class="variable">$tmpfile</span></span><br><span class="line">rm -rf <span class="variable">$tmpfile</span></span><br></pre></td></tr></table></figure><p>Surprisingly it worked well with googler. But after a bit of testing, I found I don’t like the way most pages look like in w3m, and not in any of the CLI browsers ( lynx, links2 end elinks). My brain is hard wired to read formatted pages in modern browsers. I can’t really expect any service to parse web pages to really good CLI formats such as VIM help or even man pages.</p><h2 id="the-future">The future</h2><p>The only way I can now imagine to be productive is to keep the level of format and have it in terminals and shells too. But this really a new territory that people just starting to explore, for example:</p><ul><li><a href="https://github.com/ilyash/ngs" target="_blank" rel="noopener">NGS</a> - Create a language that will be domain-specific for system tasks (interesting )</li><li><a href="https://github.com/unconed/TermKit" target="_blank" rel="noopener">TermKit</a> - Experimental Terminal platform built on WebKit + node.js which was <a href="https://www.reddit.com/r/programming/comments/137kd9/18_months_ago_termkit_a_nextgeneration_terminal/" target="_blank" rel="noopener">abandoned</a>.</li><li><a href="https://hyper.is/" target="_blank" rel="noopener">Hyper</a> - JS/HTML/CSS Terminal (I will give it a try)</li><li><a href="https://github.com/railsware/black-screen" target="_blank" rel="noopener">Black Screen</a> - Black Screen is an IDE in the world of terminals. Also works on JS, HTML and CSS. (maybe)</li><li><a href="http://xiki.org/" target="_blank" rel="noopener">xiki</a> - A shell console with GUI features</li></ul><p>So I think I finished with bringing new technology to old and try moving forward.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      Browser and terminal symbioses
    
    </summary>
    
      <category term="UI" scheme="https://abraverm.github.io/categories/UI/"/>
    
      <category term="system" scheme="https://abraverm.github.io/categories/UI/system/"/>
    
    
      <category term="browser - terminal - firefox - googler - docker" scheme="https://abraverm.github.io/tags/browser-terminal-firefox-googler-docker/"/>
    
  </entry>
  
  <entry>
    <title>i3 alternative context switch</title>
    <link href="https://abraverm.github.io/2017/05/22/i3_alternative_context_switch/"/>
    <id>https://abraverm.github.io/2017/05/22/i3_alternative_context_switch/</id>
    <published>2017-05-22T14:54:33.000Z</published>
    <updated>2018-07-02T15:25:59.759Z</updated>
    
    <content type="html"><![CDATA[<script src='https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js'></script><script src='/js/attachTooltips.js'></script><link rel='stylesheet' href='/css/tippy.css'><p>I like to maximize my productivity as life is short and there are so many things I enjoy doing. My biggest enemy when I’m using the computer is to be forced waiting for something to complete or happen. Such as a tasks that takes 2-5 minutes, or slow discussion with someone. I also hate when I’m in a hurry I get mixed up with different desktops I have. That is each program (context) has its own desktop in the window manager. Each desktop is numbered, so for example, Firefox is usually at desktop number 1. I have something like 5-6 major programs running. Switching to the right desktop number blindly and fast, can be a challenge. Currently I use the key binding $mod+#num. But this proved to be clumsy over time.</p><hr><p><strong>Update 19/05/2017</strong>: Today I’ve returned to write the post as I was busy with possessive and hectic improvement of i3 and other stuff in my system UI. I shoudn’t have postponed my writing, bad me.</p><p>I’m trying to use a new system of keybindings for switching between applications. The idea is to use a specific key combo to switch to target context. For example $mod+F will take me to Firefox. The reason I feel it will be better, is because I will not have to remember the desktop I left things, or find the number on my keyboard, and less chance hitting the wrong number. The two main problems with the method are:</p><ul><li>I will have to get used to using the new keybindings, and I’m not sure how easy it should be.</li><li>I can’t possible cover all possible applications out there or make it “smart” to be usable. So I have to decide what I need to have key binding for.</li></ul><p>My current list of “must” keybinded applications:</p><ol type="1"><li>Work browser - Firefox work profile</li><li>Personal browser - Firefox personal profile</li><li>Terminal - Urxvt</li><li>Mail - Mutt</li><li>Chat - WeeChat</li><li>Music - Pianobar</li><li>Blog - custom Tmux server in Urxvt</li><li>Wiki - Personal Vim Wiki</li><li>Journal - Vim Wiki Journal</li></ol><p>The last three probably will unite to a single Tmux server. I noticed that I can’t do so much writing during the day even if all of them open. Maybe I should unite the Mail and WeeChat to another Tmux server… Usage of work browser rarely collide with personal use, so fast switching between them ain’t critical.</p><p>But the most import part is to have extremly fast context switching. Now I already have the “Windows” button mapped for all i3 bind keys, so this causes a minor issue. How bind new keys that make sense such as “$mod+f” for firefox and not overlap with existing bindings like “$mod+f” for fullscreen. After a bit of searching online, I came across <a href="https://i3wm.org/docs/userguide.html#binding_modes" target="_blank" rel="noopener">i3 modes</a>:</p><blockquote><p>You can have multiple sets of bindings by using different binding modes. When you switch to another binding mode, all bindings from the current mode are released and only the bindings defined in the new mode are valid for as long as you stay in that binding mode. The only predefined binding mode is default, which is the mode i3 starts out with and to which all bindings not defined in a specific binding mode belong.</p></blockquote><p>That sounded to me what I was looking for, but boy… making the mode behave like I wanted, wasn’t easy:</p><ol type="1"><li>It has to find the correct window: two types of Firefox instances, and multipe terminals.</li><li>Tell i3 to focus on that window</li><li>Transperent change of modes</li><li>Nice to have: UI friendly</li></ol><h2 id="i3-finding-windows">i3 finding windows</h2><p>To <a href="https://i3wm.org/docs/ipc.html" target="_blank" rel="noopener">interact with i3</a> there is a command tool called <a href="http://build.i3wm.org/docs/i3-msg.html" target="_blank" rel="noopener">i3-msg</a> which to me is easier to develop the <a href="https://i3wm.org/docs/userguide.html#command_criteria" target="_blank" rel="noopener">creteria</a> than updating i3 directly. The most common and easiest to control creterias where ‘class’ and ‘title’:</p><blockquote><p><em>class</em> Compares the window class (the second part of WM_CLASS). Use the special value __focused__ to match all windows having the same window class as the currently focused window.</p></blockquote><blockquote><p><em>title</em> Compares the X11 window title (_NET_WM_NAME or WM_NAME as fallback). Use the special value __focused__ to match all windows having the same window title as the currently focused window.</p></blockquote><p>Now that I’m looking at it again, con_mark maybe a better option than title. But title can be set with the program lunch, at least with terminals. To make it work I defined all my key bindings that start applications in Urxvt to have the argument <code>-title &quot;APP_NAME&quot;</code>. However it didn’t go so well with terminals that have Tmux in them. I had to tell Tmux to not update the window title automatically, which I don’t have any use for anyway in I3: <code>set-option -g automatic-rename off</code> at ~/.tmux.conf. The end result is like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Pandora - F8</span><br><span class="line">exec urxvt256c-ml -title &quot;Pandora&quot; -ls -sb -bc -e ~/bin/pianobar</span><br><span class="line">for_window [class=&quot;URxvt&quot; title=&quot;Pandora&quot;] move to workspace 18, border none</span><br><span class="line">bindsym $mod+F8 exec urxvt256c-ml -title &quot;Pandora&quot; -ls -sb -bc -e ~/bin/pianobar</span><br><span class="line">bindsym F8 workspace 18</span><br></pre></td></tr></table></figure><p>To change Firefox title required ugly workaround, an add-on - <a href="https://addons.mozilla.org/en-US/firefox/addon/firetitle/" target="_blank" rel="noopener">Firetitle</a>. <em>Which works magically! +1 to the maintainer</em>. This took care of 1 and 2. Implementing the actual mode switch took a bit of web search and came up with this setup:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set $select Firefox (H)ome, (F)irefox RedHat, (T)erminal, (W)eeChat, (M)utt, (B)log, (P)andora, (W)iki, (D)iary</span><br><span class="line">mode &quot;$select&quot; &#123;</span><br><span class="line">    bindsym h exec --no-startup-id i3-msg &apos;[class=&quot;Firefox&quot; title=&quot;Home&quot;] focus&apos;</span><br><span class="line">    bindsym f exec --no-startup-id i3-msg &apos;[class=&quot;Firefox&quot; title=&quot;RedHat&quot;] focus&apos;</span><br><span class="line">    bindsym t exec --no-startup-id i3-msg &apos;[class=&quot;URxvt&quot; title=&quot;Terminal&quot;] focus&apos;</span><br><span class="line">    bindsym g exec --no-startup-id i3-msg &apos;[class=&quot;URxvt&quot; title=&quot;WeeChat&quot;] focus&apos;</span><br><span class="line">    bindsym m exec --no-startup-id i3-msg &apos;[class=&quot;URxvt&quot; title=&quot;Mutt&quot;] focus&apos;</span><br><span class="line">    bindsym b exec --no-startup-id i3-msg &apos;[class=&quot;URxvt&quot; title=&quot;Blog&quot;] focus&apos;</span><br><span class="line">    bindsym p exec --no-startup-id i3-msg &apos;[class=&quot;URxvt&quot; title=&quot;Pandora&quot;] focus&apos;</span><br><span class="line">    bindsym w exec --no-startup-id i3-msg &apos;[class=&quot;URxvt&quot; title=&quot;Wiki&quot;] focus&apos;</span><br><span class="line">    bindsym d exec --no-startup-id i3-msg &apos;[class=&quot;URxvt&quot; title=&quot;Diary&quot;] focus&apos;</span><br><span class="line">    bindsym --release Menu mode &quot;default&quot;</span><br><span class="line">&#125;</span><br><span class="line">bindsym Menu mode &quot;$select&quot;</span><br></pre></td></tr></table></figure><p>The nice thing about it is that it shows in the i3-status bar the options <code>Firefox (H)ome, (F)irefox RedHat, (T)erminal, (W)eeChat, (M)utt, (B)log, (P)andora, (W)iki, (D)iary</code> and I’m in that mode only when Menu button is pressed. Menu button, BTW, is that button between the right Alt and Ctrl. The only time I need it is when I’m doing something in web browser that needs that menu. I prefer the context switching over it.</p><p>After writing this post, I’ve updated the configuration to:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set $select Firefox (H)ome, (F)irefox RedHat, (T)erminal, (W)eeChat, (M)utt, (B)log, (P)andora, (W)iki, (D)iary</span><br><span class="line">mode &quot;$select&quot; &#123;</span><br><span class="line">    bindsym h [class=&quot;Firefox&quot; title=&quot;Home&quot;] focus</span><br><span class="line">    bindsym f [class=&quot;Firefox&quot; title=&quot;RedHat&quot;] focus</span><br><span class="line">    bindsym t [class=&quot;URxvt&quot; title=&quot;Terminal&quot;] focus</span><br><span class="line">    bindsym g [class=&quot;URxvt&quot; title=&quot;WeeChat&quot;] focus</span><br><span class="line">    bindsym m [class=&quot;URxvt&quot; title=&quot;Mutt&quot;] focus</span><br><span class="line">    bindsym b [class=&quot;URxvt&quot; title=&quot;Blog&quot;] focus</span><br><span class="line">    bindsym p [class=&quot;URxvt&quot; title=&quot;Pandora&quot;] focus</span><br><span class="line">    bindsym w [class=&quot;URxvt&quot; title=&quot;Wiki&quot;] focus</span><br><span class="line">    bindsym d [class=&quot;URxvt&quot; title=&quot;Diary&quot;] focus</span><br><span class="line">    bindsym --release Menu mode &quot;default&quot;</span><br><span class="line">&#125;</span><br><span class="line">bindsym Menu mode &quot;$select&quot;</span><br></pre></td></tr></table></figure><p><strong>Retrospective</strong>: After two weeks of usage I can’t say the transition is over. The old habit of desktop switching is still there, especially when I’m in a hurry. But when I use it normally I noticed that my first thought is of the new key binding. I didn’t disable the desktop switching as I find it useful for loose cases. I also noticed that some key bindings are easier to remember, such Menu-f for work Firefox. Some bindings are just easier to push (same example). But bindings like Menu-h, home Firefox, is just hard to push and remember. I wish Linux just could read my mind.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      Keybinding to more rational and faster context switching
    
    </summary>
    
      <category term="UI" scheme="https://abraverm.github.io/categories/UI/"/>
    
      <category term="system" scheme="https://abraverm.github.io/categories/UI/system/"/>
    
    
      <category term="window manager" scheme="https://abraverm.github.io/tags/window-manager/"/>
    
      <category term="i3" scheme="https://abraverm.github.io/tags/i3/"/>
    
      <category term="productivity" scheme="https://abraverm.github.io/tags/productivity/"/>
    
      <category term="linux" scheme="https://abraverm.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ghost.py venv</title>
    <link href="https://abraverm.github.io/2017/05/07/ghost.py-venv/"/>
    <id>https://abraverm.github.io/2017/05/07/ghost.py-venv/</id>
    <published>2017-05-07T08:49:15.000Z</published>
    <updated>2018-07-02T15:19:47.515Z</updated>
    
    <content type="html"><![CDATA[<script src='https://unpkg.com/tippy.js@2.0.2/dist/tippy.all.min.js'></script><script src='/js/attachTooltips.js'></script><link rel='stylesheet' href='/css/tippy.css'><p>I’m not a professional programmer, and Python is just a tool to GTD. But I also hate doing things sloppily, especially when I think it something I will have to get back to in the future. So when I started working on a long term solution I wanted to do it right. For me, modern open source project must avoid <a href="https://en.wikipedia.org/wiki/Dependency_hell" target="_blank" rel="noopener">dependency hell</a> at any stage of project life cycle. In development it means to use isolated, easy to manage environment. Python has a known tool for that called <a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="noopener">virtualenv</a>. And naturally when I started working on my small project, I created an environment with virtualenv. However, <a href="http://jeanphix.me/Ghost.py/" target="_blank" rel="noopener">Ghost.py</a>, one of the libraries I wanted to use, decided it doesn’t going to play a long.</p><p>The innocent steps of a noob following <a href="http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/" target="_blank" rel="noopener">documentation</a>: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv my_project</span><br><span class="line">workon my_project</span><br><span class="line">pip install Ghost.py</span><br><span class="line">python -c <span class="string">"from ghost import Ghost"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>I use IPython to play with libraries but why over complicate a post.</p></blockquote><p>And what did I got?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: No module named QtWebKi</span><br></pre></td></tr></table></figure><blockquote><p>Gods of development really love me… while I’m writing this post, I’m verifying my steps and what do you know, the issue is not reproducable in a Docker container -_-’</p></blockquote><p>sigh… I hate when your first step is falling.</p><p>The next step is so boringly common - Google it. My first search was what are Ghost.py dependencies. Sometimes, maintainers don’t enforce the dependency during deployment and wait for the user to read their <a href="https://github.com/jeanphix/Ghost.py#installation" target="_blank" rel="noopener">documentation</a>.</p><blockquote><p>Now I noticed my own stupidity, the documentation asks for PySide2, while I did something else and made things worse.</p></blockquote><p>I installed PySide, it was easy but took a long time:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyside</span><br></pre></td></tr></table></figure><p>To my disappointment the issue persisted. My next Google queries took me to unexpected journey:</p><ul><li><a href="https://github.com/jeanphix/Ghost.py/issues/168" target="_blank" rel="noopener">Ghost.py issue 168</a></li><li><a href="https://github.com/jeanphix/Ghost.py/issues/262" target="_blank" rel="noopener">Ghost.py issue 162</a></li><li><a href="http://stackoverflow.com/questions/32701784/centos-7-python-importerror-cannot-import-name-qtwebkit-even-though-its-in-my" target="_blank" rel="noopener">Stackoverflow 1</a></li><li><a href="http://stackoverflow.com/questions/29523541/importerror-no-module-named-pyqt4-qtwebkit" target="_blank" rel="noopener">Stackoverflow 2</a></li><li><a href="https://ubuntuforums.org/showthread.php?t=2253348" target="_blank" rel="noopener">Ubuntu forums</a></li></ul><blockquote><p>OK, it seems the issue is a bit reproducable, but I’m still confused how I got in that mess.</p></blockquote><p>All the links suggest other library is involved, PyQt. And I thought maybe installing it will solve my issues. Guess what…</p><p><strong>You can’t install PyQt with Pip(?!) in virtualenv</strong></p><p>This seems to be a known fact:</p><ul><li><a href="http://stackoverflow.com/questions/1961997/is-it-possible-to-add-pyqt4-pyside-packages-on-a-virtualenv-sandbox" target="_blank" rel="noopener">Stackoverflow</a></li><li><a href="http://amyboyle.ninja/Python-Qt-and-virtualenv-in-linux" target="_blank" rel="noopener">Ninjas</a></li></ul><p>It started to annoy me, I just want to play a bit with Ghost.py, there are other options out there. Why do I even bother?! does it really worth my time?! is that makes me happy?!</p><p>Well… I didn’t like any of the solutions out there, but linking the os package into the environment seemed to me the easiest path to go with. I used one of the <a href="https://gist.github.com/davidfraser/6555916" target="_blank" rel="noopener">scripts</a> in the searches for doing it (maybe another tool for the box). You know what?</p><p>It didn’t work.</p><p><strong>WTF!</strong></p><blockquote><p>I gave this problem 60% of me, while reading on optimizing ZSH and virtualenv workflow, and leaving for long periods to watch Sense8 new season which is amazing.</p></blockquote><p>The next day I put my thinking hat: “What if PySide and PyQT both provide QtWebKit but for some reason Ghost.py prefers one of them?”. I removed PySide and everything worked, and I said “Huh! that worth a post on my fresh blog”. As I mentioned earlier I wanted to confirm everything in a really clean environment like Docker container. But you know what? Ghost.py worked without PyQt or PySide, in a virtualenv as I planned. So I removed the link to PyQt in my development environment to investigate further, but the gods waited for that and had good laugh on me when I saw that everything works, and I’m like</p><figure><img src="/images/meme_wut.jpg" alt="wut"><figcaption>wut</figcaption></figure><p>Just to make sure the issue is reproducible, I installed PySide with Pip in the container, and walla! here is the issue.</p><p>“It’s a dangerous business, Frodo, going out your door. You step onto the road, and if you don’t keep your feet, there’s no knowing where you might be swept off to.” like to dependency hell, you don’t want to go there.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      Make Ghost.py work from Python virtual environment
    
    </summary>
    
      <category term="development" scheme="https://abraverm.github.io/categories/development/"/>
    
    
      <category term="python" scheme="https://abraverm.github.io/tags/python/"/>
    
      <category term="ghost.py" scheme="https://abraverm.github.io/tags/ghost-py/"/>
    
      <category term="virtualenv" scheme="https://abraverm.github.io/tags/virtualenv/"/>
    
      <category term="best-practise" scheme="https://abraverm.github.io/tags/best-practise/"/>
    
      <category term="workaround" scheme="https://abraverm.github.io/tags/workaround/"/>
    
  </entry>
  
</feed>
